#!/bin/bash

export SCHEME_HOST="http://localhost:3001"

function safepkt_backend_00_list_steps() {
    curl --no-progress-meter "${SCHEME_HOST}"/steps | jq
}

function safepkt_backend_01_upload_source() {
    curl --no-progress-meter --request POST \
        --url "${SCHEME_HOST}"/source \
        --header 'Content-Type: application/json' \
        --data '{"source":""}'
}

function safepkt_backend_02_program_verification() {
    curl --no-progress-meter -XPOST "${SCHEME_HOST}"/program-verification/efc7ed4ad2 | jq
}

function safepkt_backend_03_get_program_verification_progress() {
    curl --no-progress-meter -XGET "${SCHEME_HOST}"/program-verification/efc7ed4ad2/progress | jq
}

function safepkt_backend_04_get_program_verification_report() {
    curl --no-progress-meter -XGET "${SCHEME_HOST}"/program-verification/efc7ed4ad2/report | jq
}

function safepkt_backend_05_get_program_fuzzing() {
    curl --no-progress-meter -XPOST "${SCHEME_HOST}"/program-fuzzing/efc7ed4ad2 | jq
}

function safepkt_backend_06_get_program_fuzzing_report() {
    curl --no-progress-meter -XGET "${SCHEME_HOST}"/program-fuzzing/efc7ed4ad2/progress | jq
}

function safepkt_backend_07_get_program_fuzzing_report() {
    curl --no-progress-meter -XGET "${SCHEME_HOST}"/program-fuzzing/efc7ed4ad2/report | jq
}

function safepkt_backend_08_list_uploaded_sources() {
    /bin/bash -c "curl --no-progress-meter -XPOST ""${SCHEME_HOST}""/uploaded-sources-listing/_"
}

function safepkt_backend_09_get_uploaded_sources_report() {
    /bin/bash -c "curl --no-progress-meter -XGET ""${SCHEME_HOST}""/uploaded-sources-listing/_/report"
}

function safepkt_backend_10_stop_verification() {
    curl --no-progress-meter -XDELETE "${SCHEME_HOST}"/program-verification/efc7ed4ad2 | jq
}
